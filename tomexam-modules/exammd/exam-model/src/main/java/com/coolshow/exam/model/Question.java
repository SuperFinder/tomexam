package com.coolshow.exam.model;

import com.coolshow.exam.common.Singleton;
import com.coolshow.exam.model.base.BaseQuestion;
import com.jfinal.plugin.activerecord.Db;

import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Question extends BaseQuestion<Question> {
  private static final Question dao = Singleton.getInstance().getSingletonObject(Question.class)
      .dao();

  //todo 系统时间
  public Integer addAndDept(Question question) {
    return Db.update(getSql("question.addAndDept"), question.getDbid(), question.getQtype(),
        question.getQlevel(), question.getQfrom(), question.getStatus(), question.getContent(),
        question.getPostdate(),
        question.getSkey(), question.getKeydesc(), question.getAdminid(), question.getDepartmentid()
    );
  }

  public List findByOther(Question question, Integer total) {
    return dao.find(getSql("question.findByOther"), question.getDbid(), question.getQtype(), question.getQlevel()
        , total);
  }

  public List findByOtherNew(Question question, Integer total) {
    return dao.find(getSql("question.findByOtherNew"), question.getDbid(), question.getQtype(), question.getQlevel()
        , total);
  }
  /**
   * @return 查找所用启用的问题
   */
  public List findInvoked() {
    return dao.find(getSql("question.findInvoked"));
  }

  //todo 系统时间
  public Integer add(Question question) {
    return Db.update(getSql("question.add"), question.getDbid(), question.getDbid(),
        question.getQtype(), question.getQlevel(), question.getQfrom(), question.getStatus(),
        question.getContent(), question.getPostdate(), question.getSkey(), question.getKeydesc(),
        question.getAdminid());
  }


  public List findById(Integer id) {
    return dao.find(getSql("question.findById"), id);
  }

  public Integer update(Question question) {
    return Db.update(getSql("question.update"), question.getDbid(), question.getDbid(),
        question.getQtype(), question.getQlevel(), question.getQfrom(), question.getStatus(),
        question.getContent(), question.getSkey(), question.getKeydesc(), question.getId());
  }


  public Integer delete(Integer id) {
    return Db.update(getSql("question.delete"), id);
  }

  public List findIsUse() {

    return dao.find(getSql("question.findIsUse"));
  }
}